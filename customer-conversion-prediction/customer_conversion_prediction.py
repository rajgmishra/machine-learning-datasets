# -*- coding: utf-8 -*-
"""customer-conversion-prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fwoTRHqz3_T-_RekFYT9qNkeqasMEBQ7

**Predict Customer Conversion (Churn) with Machine Learning**

Importing necessary libraries
"""

import numpy as np
import pandas as pd
import sklearn
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

"""Reading and exploring the dataset"""

df = pd.read_csv("customer-churn-dataset.csv")
df

df.shape

df.columns.values

"""To check for missing values or (NA)"""

df.isna().sum()

"""Dataset Statistics"""

df.describe()

df['Churn'].value_counts()

"""Visualizing the conversion"""

sns.countplot(df['Churn'])

"""Percentage-wise results"""

numRetained = df[df.Churn == 'No'].shape[0]
numChurned = df[df.Churn == 'Yes'].shape[0]

# print the percentage of customers that stayed
print(numRetained/(numRetained + numChurned) * 100,'% of customers stayed with the company')
# peint the percentage of customers that left
print(numChurned/(numRetained + numChurned) * 100, '% of customers left the company')

"""Gender-wise visualization of customer conversion"""

sns.countplot(x ='gender', hue='Churn', data=df)

"""Visualization of customer conversion for the internet service"""

sns.countplot(x='InternetService', hue='Churn', data=df)

"""Visualization of Numerical data"""

numericFeatures = ['tenure', 'MonthlyCharges']
fig, ax = plt.subplots(1,2, figsize=(28, 8))
df[df.Churn == "No"][numericFeatures].hist(bins=20, color='blue', alpha=0.5, ax=ax)
df[df.Churn == "Yes"][numericFeatures].hist(bins=20, color='orange', alpha=0.5, ax=ax)

"""Dropping unnecessary columns from the dataset"""

cleanDF = df.drop('customerID', axis=1)

# Convert all the non-numeric columns to numeric
for column in cleanDF.columns:
  if cleanDF[column].dtype == np.number:
    continue
  cleanDF[column] = LabelEncoder().fit_transform(cleanDF[column])

cleanDF.dtypes

"""Scaling of data"""

x = cleanDF.drop('Churn', axis=1)
y = cleanDF['Churn']
x = StandardScaler().fit_transform(x)

"""Split the data into 80% for training and 20% for testing"""

xtrain, xtest, ytrain, ytest = train_test_split(x,y, test_size=0.2, random_state=42)

"""Creating and Training the Logistic Regression Model"""

model = LogisticRegression()
# Train the model
model.fit(xtrain, ytrain)

LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=100,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)

"""Creating predictions on the Test data"""

predictions = model.predict(xtest)

# print the predictions
print(predictions)

"""Final scores - precision, recall and f1-score"""

print(classification_report(ytest, predictions))